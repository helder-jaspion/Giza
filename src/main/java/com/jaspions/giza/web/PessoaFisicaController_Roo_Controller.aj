// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.jaspions.giza.web;

import com.jaspions.giza.domain.Contato;
import com.jaspions.giza.domain.DocumentoIdentidade;
import com.jaspions.giza.domain.Municipio;
import com.jaspions.giza.domain.PessoaFisica;
import com.jaspions.giza.domain.Sexo;
import com.jaspions.giza.web.PessoaFisicaController;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect PessoaFisicaController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String PessoaFisicaController.create(@Valid PessoaFisica pessoaFisica, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, pessoaFisica);
            return "pessoafisicas/create";
        }
        uiModel.asMap().clear();
        pessoaFisica.persist();
        return "redirect:/pessoafisicas/" + encodeUrlPathSegment(pessoaFisica.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String PessoaFisicaController.createForm(Model uiModel) {
        populateEditForm(uiModel, new PessoaFisica());
        List<String[]> dependencies = new ArrayList<String[]>();
        if (DocumentoIdentidade.countDocumentoIdentidades() == 0) {
            dependencies.add(new String[] { "documentoidentidade", "documentoidentidades" });
        }
        if (Municipio.countMunicipios() == 0) {
            dependencies.add(new String[] { "municipio", "municipios" });
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "pessoafisicas/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String PessoaFisicaController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("pessoafisica", PessoaFisica.findPessoaFisica(id));
        uiModel.addAttribute("itemId", id);
        return "pessoafisicas/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String PessoaFisicaController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("pessoafisicas", PessoaFisica.findPessoaFisicaEntries(firstResult, sizeNo));
            float nrOfPages = (float) PessoaFisica.countPessoaFisicas() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("pessoafisicas", PessoaFisica.findAllPessoaFisicas());
        }
        addDateTimeFormatPatterns(uiModel);
        return "pessoafisicas/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String PessoaFisicaController.update(@Valid PessoaFisica pessoaFisica, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, pessoaFisica);
            return "pessoafisicas/update";
        }
        uiModel.asMap().clear();
        pessoaFisica.merge();
        return "redirect:/pessoafisicas/" + encodeUrlPathSegment(pessoaFisica.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String PessoaFisicaController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, PessoaFisica.findPessoaFisica(id));
        return "pessoafisicas/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String PessoaFisicaController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        PessoaFisica pessoaFisica = PessoaFisica.findPessoaFisica(id);
        pessoaFisica.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/pessoafisicas";
    }
    
    void PessoaFisicaController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("pessoaFisica_datanascimento_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    void PessoaFisicaController.populateEditForm(Model uiModel, PessoaFisica pessoaFisica) {
        uiModel.addAttribute("pessoaFisica", pessoaFisica);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("contatoes", Contato.findAllContatoes());
        uiModel.addAttribute("documentoidentidades", DocumentoIdentidade.findAllDocumentoIdentidades());
        uiModel.addAttribute("municipios", Municipio.findAllMunicipios());
        uiModel.addAttribute("sexoes", Arrays.asList(Sexo.values()));
    }
    
    String PessoaFisicaController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
