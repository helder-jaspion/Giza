// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.jaspions.giza.domain;

import com.jaspions.giza.domain.DocumentoIdentidade;
import com.jaspions.giza.domain.DocumentoIdentidadeDataOnDemand;
import com.jaspions.giza.domain.Municipio;
import com.jaspions.giza.domain.MunicipioDataOnDemand;
import com.jaspions.giza.domain.PessoaFisica;
import com.jaspions.giza.domain.PessoaFisicaDataOnDemand;
import com.jaspions.giza.domain.Sexo;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect PessoaFisicaDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PessoaFisicaDataOnDemand: @Component;
    
    private Random PessoaFisicaDataOnDemand.rnd = new SecureRandom();
    
    private List<PessoaFisica> PessoaFisicaDataOnDemand.data;
    
    @Autowired
    private DocumentoIdentidadeDataOnDemand PessoaFisicaDataOnDemand.documentoIdentidadeDataOnDemand;
    
    @Autowired
    private MunicipioDataOnDemand PessoaFisicaDataOnDemand.municipioDataOnDemand;
    
    public PessoaFisica PessoaFisicaDataOnDemand.getNewTransientPessoaFisica(int index) {
        PessoaFisica obj = new PessoaFisica();
        setApelido(obj, index);
        setCpf(obj, index);
        setDataNascimento(obj, index);
        setDocumentoIdentidade(obj, index);
        setMunicipioNaturalidade(obj, index);
        setNome(obj, index);
        setSexo(obj, index);
        return obj;
    }
    
    public void PessoaFisicaDataOnDemand.setApelido(PessoaFisica obj, int index) {
        String apelido = "apelido_" + index;
        obj.setApelido(apelido);
    }
    
    public void PessoaFisicaDataOnDemand.setCpf(PessoaFisica obj, int index) {
        String cpf = "cpf_" + index;
        obj.setCpf(cpf);
    }
    
    public void PessoaFisicaDataOnDemand.setDataNascimento(PessoaFisica obj, int index) {
        Date dataNascimento = new Date(new Date().getTime() - 10000000L);
        obj.setDataNascimento(dataNascimento);
    }
    
    public void PessoaFisicaDataOnDemand.setDocumentoIdentidade(PessoaFisica obj, int index) {
        DocumentoIdentidade documentoIdentidade = documentoIdentidadeDataOnDemand.getRandomDocumentoIdentidade();
        obj.setDocumentoIdentidade(documentoIdentidade);
    }
    
    public void PessoaFisicaDataOnDemand.setMunicipioNaturalidade(PessoaFisica obj, int index) {
        Municipio municipioNaturalidade = municipioDataOnDemand.getRandomMunicipio();
        obj.setMunicipioNaturalidade(municipioNaturalidade);
    }
    
    public void PessoaFisicaDataOnDemand.setNome(PessoaFisica obj, int index) {
        String nome = "nome_" + index;
        obj.setNome(nome);
    }
    
    public void PessoaFisicaDataOnDemand.setSexo(PessoaFisica obj, int index) {
        Sexo sexo = Sexo.class.getEnumConstants()[0];
        obj.setSexo(sexo);
    }
    
    public PessoaFisica PessoaFisicaDataOnDemand.getSpecificPessoaFisica(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        PessoaFisica obj = data.get(index);
        Long id = obj.getId();
        return PessoaFisica.findPessoaFisica(id);
    }
    
    public PessoaFisica PessoaFisicaDataOnDemand.getRandomPessoaFisica() {
        init();
        PessoaFisica obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return PessoaFisica.findPessoaFisica(id);
    }
    
    public boolean PessoaFisicaDataOnDemand.modifyPessoaFisica(PessoaFisica obj) {
        return false;
    }
    
    public void PessoaFisicaDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = PessoaFisica.findPessoaFisicaEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'PessoaFisica' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<PessoaFisica>();
        for (int i = 0; i < 10; i++) {
            PessoaFisica obj = getNewTransientPessoaFisica(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
